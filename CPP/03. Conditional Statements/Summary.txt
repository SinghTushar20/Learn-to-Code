In C++ false is 0 and any other value is 1 or true. Conditional statements are prepared using
relational operators.
Relational Operators are :
<  Less than
<= Less than equal to
>  Greater than
>= Greather than equal to
== whether equal to
!= Not equal to

Logical Operators : To combine two or more than two conditions
Logical Operators are : 
&& - AND
|| - OR
!  - NOT
Remember about SHORT CIRCUTING


When we do not need a variable throughout the program but only to check a condition
We can either create an empty block and enclose the variable we want to limit in scope using {} - A Dummy Block, because in C++ scopes are defined by {}.

eg. {
        int c = a + b;
        cout << c << endl;
    }
    cout<<c; // can't access c here
OR
if (int c = a + b; c > 10) // Available only in C++ 17.
    {
        cout << "Sum is greater than 10.\n";
    }
cout<<c; // can't access c here

C++ allows declaration of variables as per our needs within a specified scope or throughout the program that's our choice.
In C we were supposed to declare all the variables in the beginning of a program at one place.
In above example based on some if condition we declare c and use it to print sum and outside the {} c variable won't exist.


Switch case is a branch and control statement. Construct of switch case looks like following :

switch (expression) // NOTE : Expression can be int or char type variable.
{
case 1:
        code for case 1
        break;
case 2:
        code for case 2
        break;
default:
        code for default case (OPTIONAL), if break written anywhere other than last then use break.
}

SWITCH cases are used for menu-driven programs where user has choices to select from, for every case we write a code.
We can have nested switch cases as well.
NOTE: If we don't use break in any case the code will continue to go down untill it gets a break.


Ternary operators are there for conditional assignment while if-else for conditional execution.