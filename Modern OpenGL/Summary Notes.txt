OpenGL is a graphics API that allows us to do things with graphics, specifically it allows us to actually access our GPU(graphics processing unit) which is our graphics card which is good at drawing graphics.

In order to actually utilize this massively powerful graphics processor that we have in either a computer or a device like a phone we need to actually use some kind of API to get access to that actual hardware and OpenGL is just one of many api's that actually allows us to access the graphics card and tell it what to do.
    Other API like OpenGL are Vulcan, direct3d etc.

OpenGL at its core is just a specification, it's kind of like a C++ specification in that regard it doesn't actually define any code or anything what it is is a specification that lists what function should exist, what parameters it take and what should it return. It's just a specification of what you can do with the API there's no implementation whatsoever.

Since most implementations are built by graphics card manufacturers, whenever there is a bug in the implementation this is usually solved by updating your video card drivers; those drivers include the newest versions of OpenGL that your card supports. This is one of the reasons why it's always advised to occasionally update your graphic drivers.

OpenGL's implementation is actually done in the GPU driver by the GPU manufacturer. Every graphics card manufacturer gonna have their own implementations so everyone's implementation of OpenGL is gonna be slightly different which is why in a lot of cases some things may work on NVIDIA drivers on an NVIDIA GPU but that same game might look a little bit different on AMD or maybe there are bugs etc.

OpenGL is not certainly open source.

OpenGL is cross platform which is it's only plus point.
    Vulcan is also a cross platform Graphics API.
    direct3d and metal are for windows and iOS respectively. They are native to the platform.

Legacy OpenGL VS Modern OpenGL: The distinction between these two is shader.
    A shader is program that runs on GPU.
    Code in C++ or Java or C# or whatever language, it runs on CPU but since we're specifically dealing with graphics for a lot of the time we want to control what the GPU does and probably move a lot of our code from the CPU to the GPU because it's gonna run faster on the GPU so that's why shaders come in they just allow us to write code on the GPU.



Creating a Window for things to place: OpenGL don't deal with creating windows, Windowing is OS specific, we use win32 API for creating a window in windows OS, now OpenGL is cross platform so we also need a way to create the window irrespective of OS. 
    For this we use some other tools like GLFW, GLUT, SDL, SFML.

OpenGL functions are implemented in the GPU drivers so what one need to do now in order to use any kind of functionality is, get into those drivers pull out the functions and call them. What we actually need to do is basically just get the function declarations and then link against the functions. So we need to access the driver DLL files and just retrieve function pointers to the functions inside those libraries. 
    Now OpenGL passed 1.1 is basically modern OpenGL and there are a lot of functions so whilst we could theoretically do this manually there are a few problems with that: 
        -> It would not be cross-platform.
        -> If there are like over a thousand functions or something like that then we need to go through all them manually and write code for that, that's gonna just be a terrible plan. 
    So what one do is use another library, there are a few libraries that actually do this like GLU, GLEW, GLAD etc. 
        -> Basically all it does is provides the OpenGL API specification kind of function declarations and symbol declarations and constants and all that stuff in a header file and then the CPP file on this. The actual implementation of the library identifies what graphics drivers you're using finds the appropriate DLL file and then loads all the function pointers. 
        
    NOTE: Don't think that these libraries implement the functions or anything they don't they just access the functions that are already on the computer in binary form.

Vertex Buffer is just a buffer(a blog of memory).
Shadder is a program that runs on GPU instead of CPU.

OpenGL is by itself a large state machine: a collection of variables that define how OpenGL should currently operate. The state of OpenGL is commonly referred to as the OpenGL context. When using OpenGL, we often change its state by setting some options, manipulating some buffers and then render using the current context.