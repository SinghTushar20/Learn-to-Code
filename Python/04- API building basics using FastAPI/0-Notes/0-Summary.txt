Python's Script VS Module VS Package VS Library
    A script is a Python file that’s intended to be run directly.
    A module is a Python file that’s intended to be imported into scripts or other modules. It often defines members like classes, functions, and variables intended to be used in other files that import it.
    A package is a collection of related modules that work together to provide certain functionality.These modules are contained within a folder and can be imported just like any other modules. 
    A library is an umbrella term that loosely means “a bundle of code.” These can have tens or even hundreds of individual modules/packages that can provide a wide range of functionality.

NOTE: To tell python that a certain folder is a package we have to put an __init__.py in it.
Consider package as a folder that contain 1 or more modules.

Creating a Simple API using FastAPI:
    Import FastAPI.
    Create an app instance.
    Write a path operation decorator (like @app.get("/")).
    Write a path operation function (like def root():).
    Run the development server (like uvicorn main:app --reload).

API is just a server that provides you with it's functionality.
The server interaction is all about request and response, the server listen for a request and when it get's a request it will give back a response according to it.

GET is a http method other main methods are POST, PUT, DELETE.

Using parameters in GET request but remember the parameters will be string if you want int then convert it inside the function

NOTE: When we create multiple routes the first match is the only one get executed so ORDER does matter.

Postman is a good tool for giving requests.

A schema is metadata that tells us how our data is structured. Schema is used for validation of data in a http method where the API is provided with a some data like POST request.
    We do this using pydantic module in python.

CRUD application is Create, Read, Update, Delete
    Create -> POST
    Read   -> GET
    Update -> PUT/PATCH
    Delete -> DELETE

Payload is the part of transmitted data that is the actual intended message. The payload can be sent or received in various formats, including JSON.

Status Codes are the codes that tell us what is the status of our request to the server.

We use databases for storing data instead of memory of program.
    We don't interact with databases directly instead we use a DBMS.

DBMS are of 2 main category
    Relational (SQL based)  eg. MYSQL, POSTGRESQL
    NoSQL   eg. MongoDB, DynamoDB

SQL is the language used to communicate with the DBMS.

We use a DB driver to interact with DB from our program, using SQL.

ORM(Object Relational Mapper) is a layer of abstraction that sits on top of DB. We perform all DB operation with python code and ORM is gonna convert them to SQL and interact with the DB for us.
    We can define a table as Python model and queries are made using python only.
    We will still need DB driver for interaction.

Schema(Pydantic) model VS ORM Model
    Schema model defines structure of a request and response, how each parameter should look like, eg. message should be string, id should be int etc. Though they are completly optional they build strict typing kinda thing and help so that user doesn't give a bullshit request.

    ORM model defines the column of our table, within our database.
    It is used to do CRUD operation.

Note: We store password by hasing them (we can't get the password back from the hashed form), so that even if the Database is infiltreted the theif can't do anything with the hashed form of passwords.

Note: A cryptographic salt is made up of random bits added to each password instance before its hashing. Salts create unique passwords even in the instance of two users choosing the same passwords. So even if 2 users have the same password their salt will be different which is added to the password and then they are hashed.

Many a times our API will have many http requests so to handle them we put them in a seperate folder called router in which we create different files according to the table and use APIRouter to create them router's request, in the main the app (FastAPI instance) is going to include them using include_router.

Authentication can be done using JWT token, When the user's credentials are verified the API will assign a JWT token to the user's system along with the response and will every request the Token will also be attached to it in it's header, the API will first check if the token is vaild or not, if it is then it will process the requests.

NOTE: Token is not encrypted so be careful what data you have in payload.

A Token is made of 3 majors -> Header(Metadata -> Algo and TokenType), Payload(Data), Verify Signature(It takes the header, payload and the secret code that only we have access to, paas it to a hashing algo and give us a hashed signature)

NOTE: Token is not encrypted so be careful what data you have in payload, anyone can see and manipulate that data but again, the API will handle it. Now if someone change the payload, at the API side the API is gonna create the test signature from current payload, header and secret key the hash algo will give a different signature and the access will be denied.
